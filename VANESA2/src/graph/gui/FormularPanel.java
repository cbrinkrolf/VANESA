/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package graph.gui;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.beans.PropertyChangeListener;
import java.io.IOException;

import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JTextPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter.DefaultHighlightPainter;

import org.scilab.forge.jlatexmath.ParseException;

import de.uni_bielefeld.cebitec.mzurowie.pretty_formula.main.DetailedParseCancellationException;
import de.uni_bielefeld.cebitec.mzurowie.pretty_formula.main.FormulaParser;

/**
 *
 * @author Martin Zurowietz
 */
public class FormularPanel extends javax.swing.JPanel {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private final DefaultHighlightPainter errorHighlighter;

	final JFileChooser fileChooser;

	/**
	 * Creates new form GUIWindow
	 */
	public FormularPanel(JTextPane textField, String formular, PropertyChangeListener pclistener) {
		initComponents(textField, "", pclistener);
		this.errorHighlighter = new DefaultHighlightPainter(Color.red);
		this.fileChooser = new JFileChooser();
		this.fileChooser.setFileFilter(new FileNameExtensionFilter("SVG file", "svg", "SVG"));
		jTextPane1.setText(formular);
		jTextPane1KeyReleased();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents(JTextPane textField, String formular, PropertyChangeListener pcListener) {

		jLabel1 = new javax.swing.JLabel();
		jLabel2 = new javax.swing.JLabel();
		if (pcListener != null) {
			jLabel2.addPropertyChangeListener(pcListener);
		}
		jScrollPane1 = new javax.swing.JScrollPane();
		jTextPane1 = textField;
		jButton1 = new javax.swing.JButton();

		// setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		jTextPane1.setText(formular);
		jLabel1.setForeground(new java.awt.Color(176, 1, 1));

		jTextPane1.getDocument().addDocumentListener(new DocumentListener() {
			
			@Override
			public void removeUpdate(DocumentEvent e) {
				jTextPane1KeyReleased();
			}
			
			@Override
			public void insertUpdate(DocumentEvent e) {
				jTextPane1KeyReleased();
			}
			
			@Override
			public void changedUpdate(DocumentEvent e) {
				jTextPane1KeyReleased();
			}
		});
		jTextPane1.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyReleased(java.awt.event.KeyEvent evt) {
				jTextPane1KeyReleased();
			}

			public void keyTyped(java.awt.event.KeyEvent evt) {
				jTextPane1KeyTyped(evt);
			}
		});
		jScrollPane1.setViewportView(jTextPane1);

		jButton1.setText("export");
		jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				jButton1MouseClicked(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addContainerGap()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addGroup(layout.createSequentialGroup()
										.addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jButton1)))
						.addContainerGap()));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addContainerGap()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jButton1))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE).addContainerGap()));

		this.jLabel1.setText("");
		this.jLabel2.setVisible(true);
		// this.jLabel2.getGraphics().clearRect(0, 0, this.jLabel2.getWidth(),
		// this.jLabel2.getHeight());
		// this.jTextPane1.getHighlighter().removeAllHighlights();

		try {
			// System.out.println(jTextPane1.getText());
			BufferedImage image = FormulaParser.parseToImage(this.jTextPane1.getText());
			// this.jLabel2.getGraphics();
			// System.out.println(image.getGraphics().getFont());
			// System.out.println(jLabel2.getGraphics());
			// this.jLabel2.paintAll(image.createGraphics());
			jLabel2.setIcon(new ImageIcon(image));

		} catch (DetailedParseCancellationException e) {
			this.handleDetailedParseCancellationException(e);
		} catch (ParseException e) {
			this.jLabel1.setText(e.getMessage());
		}

	}// </editor-fold>//GEN-END:initComponents

	private void jTextPane1KeyTyped(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_jTextPane1KeyTyped
		// disallow multiple lines
		String formula = this.jTextPane1.getText();
		if (formula.contains("\n")) {
			this.jTextPane1.setText(formula.replace("\n", ""));
		}
	}// GEN-LAST:event_jTextPane1KeyTyped

	private void jTextPane1KeyReleased() {// GEN-FIRST:event_jTextPane1KeyReleased
		this.jLabel1.setText("");
		// this.jLabel2.getGraphics().clearRect(0, 0, this.jLabel2.getWidth(),
		// this.jLabel2.getHeight());
		this.jTextPane1.getHighlighter().removeAllHighlights();

		try {
			BufferedImage image = FormulaParser.parseToImage(this.jTextPane1.getText());
			// this.jLabel2.getGraphics().drawImage(image, 0, 0, null);
			this.jLabel2.setIcon(new ImageIcon(image));
		} catch (DetailedParseCancellationException e) {
			this.handleDetailedParseCancellationException(e);
		} catch (ParseException e) {
			this.jLabel1.setText(e.getMessage());
		}
	}// GEN-LAST:event_jTextPane1KeyReleased

	private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jButton1MouseClicked
		int returnVal = this.fileChooser.showSaveDialog(jTextPane1);

		if (returnVal == JFileChooser.APPROVE_OPTION) {
			try {
				FormulaParser.saveToSVG(this.jTextPane1.getText(), this.fileChooser.getSelectedFile());
			} catch (IOException | ParseException e) {
				this.jLabel1.setText(e.getMessage());
			} catch (DetailedParseCancellationException e) {
				this.handleDetailedParseCancellationException(e);
			}
		}

		this.jLabel1.setText("saved");
	}// GEN-LAST:event_jButton1MouseClicked

	private void handleDetailedParseCancellationException(DetailedParseCancellationException e) {
		try {
			// highlight the position at which the error occurred
			this.jTextPane1.getHighlighter().addHighlight(e.getCharPositionInLine(), e.getEndCharPositionInLine(), this.errorHighlighter);
		} catch (BadLocationException ex) {
			// simply don't highlight
		}

		this.jLabel1.setText(e.getMessage());
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton jButton1;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTextPane jTextPane1;
	// End of variables declaration//GEN-END:variables

	public String getFormular() {
		return this.jTextPane1.getText();
	}
}
