
/*****************************************************************************
 * Copyright (C) 2004 Elie Naullleau / Semiosys SARL - France                *
 * ------------------------------------------------------------------------- *
 * This software is published under the terms of the QPL Software License    *
 * a copy of which has been included with this distribution in the           *
 * license-jmatrixview.txt file.                                             *
 *****************************************************************************/
/*
 * MatrixPanel.java
 *
 * Created on 9 mars 2004, 21:03
 */

package gui.jmatrixview;
import java.awt.Adjustable;
import java.awt.Component;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;

import javax.swing.ScrollPaneConstants;
import javax.swing.SwingConstants;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import cern.colt.matrix.DoubleMatrix2D;
/**
 *
 * @author  semiosys
 */
public class MatrixControlPanel extends javax.swing.JPanel {
    
    private MatrixPanel matrixPanel;
    
    /** Creates new form MatrixPanel */
    public MatrixControlPanel( int w, int h) {
        
        initComponents();
        rowResSlider.addChangeListener(new MatrixControlPanel.RowResChangeListener());
        colResSlider.addChangeListener(new MatrixControlPanel.ColResChangeListener());
        interSpaceSlider.addChangeListener(new InterSpaceChangeListener());
        mjsp.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        mjsp.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        
        mjsp.addComponentListener(new ComponentListener() {
            // This method is called only if the component was hidden and setVisible(true) was called
            public void componentShown(ComponentEvent evt) {
                // Component is now visible
                Component c = (Component)evt.getSource();
            }
            
            // This method is called only if the component was visible and setVisible(false) was called
            public void componentHidden(ComponentEvent evt) {
                // Component is now hidden
                Component c = (Component)evt.getSource();
            }
            
            // This method is called after the component's location within its container changes
            public void componentMoved(ComponentEvent evt) {
                Component c = (Component)evt.getSource();
                
                // Get new location
               // Point newLoc = c.getLocation();
            }
            
            // This method is called after the component's size changes
            public void componentResized(ComponentEvent evt) {
                Component c = (Component)evt.getSource();
  
                if(matrixPanel!=null)
                    matrixPanel.updateMaxSize();
                
            }
        });
        
    }
    
    
    public void setData(
            DoubleMatrix2D matrix, 
            MatrixCellRenderer renderer, 
            String []rowLabels, 
            String []colLabels,
            int [] rowTypes,
            int [] colTypes) {
        matrixPanel = new MatrixPanel(matrix, mjsp.getViewport(), hScrollBar, vScrollBar);
        matrixPanel.setRowTypes(rowTypes);
        matrixPanel.setColTypes(colTypes);
        matrixPanel.setRowLabels(rowLabels);
        matrixPanel.setColLabels(colLabels);
        matrixPanel.setMatrixCellRenderer(renderer);
        mjsp.setViewportView(matrixPanel);
        
    }
    
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        mjsp = new javax.swing.JScrollPane();
        vScrollBar = new javax.swing.JScrollBar();
        southPanel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        hScrollBar = new javax.swing.JScrollBar();
        jPanel4 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        bindResCheckBox = new javax.swing.JCheckBox();
        colResSlider = new javax.swing.JSlider();
        interSpaceSlider = new javax.swing.JSlider();
        printLinesCheckBox = new javax.swing.JCheckBox();
        printValueCheckBox = new javax.swing.JCheckBox();
        showCrossCheckBox = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        rowResSlider = new javax.swing.JSlider();
        testButton = new javax.swing.JButton();
        test2Button = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        add(mjsp, java.awt.BorderLayout.CENTER);

        add(vScrollBar, java.awt.BorderLayout.EAST);

        southPanel.setLayout(new javax.swing.BoxLayout(southPanel, javax.swing.BoxLayout.X_AXIS));

        jPanel3.setMaximumSize(new java.awt.Dimension(100, 32767));
        jPanel3.setMinimumSize(new java.awt.Dimension(15, 10));
        jPanel3.setPreferredSize(new java.awt.Dimension(35, 10));
        southPanel.add(jPanel3);

        hScrollBar.setOrientation(Adjustable.HORIZONTAL);
        southPanel.add(hScrollBar);

        jPanel4.setMaximumSize(new java.awt.Dimension(20, 32767));
        jPanel4.setPreferredSize(new java.awt.Dimension(15, 10));
        southPanel.add(jPanel4);

        add(southPanel, java.awt.BorderLayout.SOUTH);

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.X_AXIS));

        bindResCheckBox.setSelected(true);
        bindResCheckBox.setToolTipText("Bind column/row resolution");
        bindResCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bindResCheckBoxActionPerformed(evt);
            }
        });

        jPanel1.add(bindResCheckBox);

        colResSlider.setFont(new java.awt.Font("Dialog", 0, 10));
        colResSlider.setMajorTickSpacing(10);
        colResSlider.setMinimum(1);
        colResSlider.setMinorTickSpacing(1);
        colResSlider.setPaintTicks(true);
        colResSlider.setToolTipText("r\u00e9solution des colonnes");
        colResSlider.setValue(6);
        jPanel1.add(colResSlider);

        interSpaceSlider.setFont(new java.awt.Font("Dialog", 0, 10));
        interSpaceSlider.setMajorTickSpacing(1);
        interSpaceSlider.setMaximum(5);
        interSpaceSlider.setPaintTicks(true);
        interSpaceSlider.setToolTipText("column inter space");
        interSpaceSlider.setValue(1);
        interSpaceSlider.setMaximumSize(new java.awt.Dimension(100, 27));
        interSpaceSlider.setMinimumSize(new java.awt.Dimension(36, 50));
        interSpaceSlider.setPreferredSize(new java.awt.Dimension(70, 27));
        jPanel1.add(interSpaceSlider);

        printLinesCheckBox.setSelected(true);
        printLinesCheckBox.setToolTipText("Paint H/V lines");
        printLinesCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printLinesCheckBoxActionPerformed(evt);
            }
        });

        jPanel1.add(printLinesCheckBox);

        printValueCheckBox.setSelected(true);
        printValueCheckBox.setToolTipText("Print cell values");
        printValueCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printValueCheckBoxActionPerformed(evt);
            }
        });

        jPanel1.add(printValueCheckBox);

        showCrossCheckBox.setSelected(true);
        showCrossCheckBox.setToolTipText("Print floating cross");
        showCrossCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showCrossCheckBoxActionPerformed(evt);
            }
        });

        jPanel1.add(showCrossCheckBox);

        add(jPanel1, java.awt.BorderLayout.NORTH);

        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.Y_AXIS));

        rowResSlider.setFont(new java.awt.Font("Dialog", 0, 10));
        rowResSlider.setMajorTickSpacing(5);
        rowResSlider.setMinimum(1);
        rowResSlider.setMinorTickSpacing(1);
        rowResSlider.setOrientation(SwingConstants.VERTICAL);
        rowResSlider.setPaintTicks(true);
        rowResSlider.setSnapToTicks(true);
        rowResSlider.setToolTipText("r\u00e9solution des lignes");
        rowResSlider.setValue(6);
        rowResSlider.setEnabled(false);
        jPanel2.add(rowResSlider);

        testButton.setText("T");
        testButton.setIconTextGap(0);
        testButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        testButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testButtonActionPerformed(evt);
            }
        });

        jPanel2.add(testButton);

        test2Button.setText("E");
        test2Button.setIconTextGap(0);
        test2Button.setMargin(new java.awt.Insets(2, 2, 2, 2));
        test2Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                test2ButtonActionPerformed(evt);
            }
        });

        jPanel2.add(test2Button);

        add(jPanel2, java.awt.BorderLayout.WEST);

    }//GEN-END:initComponents

    private void showCrossCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showCrossCheckBoxActionPerformed
        matrixPanel.setPaintCross(showCrossCheckBox.isSelected());
        matrixPanel.repaint();
    }//GEN-LAST:event_showCrossCheckBoxActionPerformed
    
    private void printLinesCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printLinesCheckBoxActionPerformed
        matrixPanel.setPaintHVLines(printLinesCheckBox.isSelected());
        matrixPanel.repaint();
    }//GEN-LAST:event_printLinesCheckBoxActionPerformed
    
    private void printValueCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printValueCheckBoxActionPerformed
        matrixPanel.setPaintValues(printValueCheckBox.isSelected());
        matrixPanel.repaint();
    }//GEN-LAST:event_printValueCheckBoxActionPerformed
    
    private void test2ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_test2ButtonActionPerformed
        matrixPanel.EigenvalueDecomposition();
    }//GEN-LAST:event_test2ButtonActionPerformed
    
    private void testButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testButtonActionPerformed
        matrixPanel.testLU();
        
    }//GEN-LAST:event_testButtonActionPerformed
    
    private void bindResCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bindResCheckBoxActionPerformed
        
        if(bindResCheckBox.isSelected()) {
            rowResSlider.setEnabled(false);
            matrixPanel.setColResolution(colResSlider.getValue());
            matrixPanel.setRowResolution(colResSlider.getValue());
        } else
            rowResSlider.setEnabled(true);
    }//GEN-LAST:event_bindResCheckBoxActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox bindResCheckBox;
    private javax.swing.JSlider colResSlider;
    private javax.swing.JScrollBar hScrollBar;
    private javax.swing.JSlider interSpaceSlider;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane mjsp;
    private javax.swing.JCheckBox printLinesCheckBox;
    private javax.swing.JCheckBox printValueCheckBox;
    private javax.swing.JSlider rowResSlider;
    private javax.swing.JCheckBox showCrossCheckBox;
    private javax.swing.JPanel southPanel;
    private javax.swing.JButton test2Button;
    private javax.swing.JButton testButton;
    private javax.swing.JScrollBar vScrollBar;
    // End of variables declaration//GEN-END:variables
    
    
    
    private class RowResChangeListener implements ChangeListener {
        public void stateChanged(ChangeEvent e) {
            matrixPanel.setRowResolution(rowResSlider.getValue());
        }
    }
    
    private class ColResChangeListener implements ChangeListener {
        public void stateChanged(ChangeEvent e) {
            matrixPanel.setColResolution(colResSlider.getValue());
            if(bindResCheckBox.isSelected())
                matrixPanel.setRowResolution(colResSlider.getValue());
        }
    }
    
    
    
    private class InterSpaceChangeListener implements ChangeListener {
        public void stateChanged(ChangeEvent e) {
            matrixPanel.setInterRowSpace(interSpaceSlider.getValue());
            matrixPanel.setInterColumSpace(interSpaceSlider.getValue());
        }
    }
    
    public void setRowLabels(String[]rl) {
        matrixPanel.setRowLabels(rl);
    }
    
     public void setColLabels(String[]cl) {
        matrixPanel.setColLabels(cl);
    }
    
     /**
      * Getter for property matrixPanel.
      * @return Value of property matrixPanel.
      */
     public MatrixPanel getMatrixPanel() {
         return matrixPanel;
     }
     
     /**
      * Setter for property matrixPanel.
      * @param matrixPanel New value of property matrixPanel.
      */
     public void setMatrixPanel(MatrixPanel matrixPanel) {
         this.matrixPanel = matrixPanel;
     }
     
}
